buildscript {
	ext {
		projectReactorVersion = '0.7.8.RELEASE'
	}
	
	// Common repositories:
	apply from: "${gradleUserHome}/repos.gradle", to: buildscript
	
    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'

group = 'com.siemens.ra.cg.nettysocketlibrary'
version = '1.0.2-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

dependencies {
	compile("org.slf4j:slf4j-simple:${slf4jVersion}")
	compile("commons-cli:commons-cli:${apacheCommonCliVersion}")
	compile("io.projectreactor.ipc:reactor-netty:${projectReactorVersion}")
	
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.assertj:assertj-core:${assertjVersion}")
    testCompile("org.awaitility:awaitility:${awaitilityVersion}")
    
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
	testRuntime("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
}

// Enable junit 5 testing
test {
    useJUnitPlatform()
}

//////////////////////////////////////////////////////////
// Create libraries for producer and consumer executables:
task producerFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.siemens.ra.cg.nettysocketlibrary.producer.SocketProducer'
    }
    baseName = 'netty-socket-library-producer'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyProducerJar(type: Copy) {
	dependsOn producerFatJar
	
	delete "src/main/docker/producer/${rootProject.name}-producer-${version}.jar"
	from "build/libs/${rootProject.name}-producer-${version}.jar"
	into 'src/main/docker/producer'
}

task consumerFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.siemens.ra.cg.nettysocketlibrary.consumer.SocketConsumer'
    }
    baseName = 'netty-socket-library-consumer'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyConsumerJar(type: Copy) {
	dependsOn consumerFatJar
	
	delete "src/main/docker/consumer/${rootProject.name}-consumer-${version}.jar"
	from "build/libs/${rootProject.name}-consumer-${version}.jar"
	into 'src/main/docker/consumer'
}

assemble.dependsOn copyProducerJar,copyConsumerJar
// Create libraries for producer and consumer executables.
//////////////////////////////////////////////////////////

publishing {
	task sourcesJar ( type: Jar, dependsOn: classes ) {
		classifier 'sources'
	    from sourceSets.main.allJava
	}
	
	// Publish repository:
	apply from: "${gradleUserHome}/publish.gradle", to: publishing

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            
        }
    }
}
